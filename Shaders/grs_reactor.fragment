varying vec3 vEyeVector,vLight1Vector;
varying vec2 vTexCoord;
uniform sampler2D uDiffuseMap;
uniform sampler2D uNormalMap;
uniform sampler2D uIlluminationMap;

vec4 CalcDiffuseLight(in vec3 lightVector, in vec3 normal, in vec4 lightColor)
{
	float intensity = dot(normal, lightVector);
	intensity = max(intensity, 0.0);
	return lightColor * intensity;
}
vec4 CalcSpecularLight(in vec3 lightVector, in vec3 eyeVector, in float exponent, in vec3 normal, in vec4 lightColor)
{
	vec3 reflection = -reflect(lightVector, normal);
	float intensity = dot(reflection, eyeVector);
	intensity = pow(max(intensity, 0.0), exponent);
	return lightColor * intensity;
}

void main(void)
{
	vec4 totalColor = vec4(0);
	vec3 eyeVector = normalize(vEyeVector);
	vec3 normal = normalize(texture2D(uNormalMap, vTexCoord).rgb - 0.5);
	vec3 lightVector = normalize(vLight1Vector);
	vec4 ambientLight = gl_LightModel.ambient;
	vec4 diffuseLight = vec4(0);
	diffuseLight += CalcDiffuseLight(lightVector, normal, gl_LightSource[1].diffuse);
	vec4 specularLight = vec4(0);
	float exponent = gl_FrontMaterial.shininess;
	specularLight += CalcSpecularLight(lightVector, eyeVector, exponent, normal, gl_LightSource[1].specular);
	specularLight.a = 1.0;
	vec4 ambientColor = gl_FrontMaterial.ambient;
	vec4 diffuseColor = gl_FrontMaterial.diffuse;
	vec4 diffuseMapColor = texture2D(uDiffuseMap, vTexCoord);
	diffuseMapColor.a = 1.0;
	diffuseColor *= diffuseMapColor;
	ambientColor *= diffuseMapColor;
	totalColor += ambientColor * ambientLight + diffuseColor * diffuseLight;
	vec4 illum = vec4(0);
	if(vTexCoord.x>0.45 && vTexCoord.y>0.5){
		if(totalColor.r<0.02) discard;
		else illum = texture2D(uIlluminationMap, vTexCoord)*0.7;
	}
	totalColor += illum;
	gl_FragColor = totalColor;
}
